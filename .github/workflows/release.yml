name: Release

on:
  push:

jobs:
  build:
    strategy:
      fail-fast: false # TODO change to true
      matrix:
        targets: [
          #{ os: ubuntu-latest,  target: x86_64-unknown-linux-musl,  cross: false, name: linux64,       ext: "", vcpkg: "x64-linux-release" },
          #{ os: ubuntu-latest,  target: aarch64-unknown-linux-musl, cross: true,  name: linux-arm64,   ext: "", vcpkg: "arm64-linux" },
          #{ os: macos-latest,   target: x86_64-apple-darwin,        cross: false, name: mac64,         ext: "", vcpkg: "x64-osx-release", ffmpeg_url: "https://sourceforge.net/projects/avbuild/files/macOS/ffmpeg-4.4-macOS-default.tar.xz/download", ffmpeg_name: "ffmpeg-4.4-macOS-default" },
          #{ os: macos-latest,   target: aarch64-apple-darwin,       cross: true,  name: mac-arm64,     ext: "", vcpkg: "arm64-osx" },
          { os: windows-latest, target: x86_64-pc-windows-msvc,     cross: false, name: windows64,     ext: ".exe", vcpkg: "x64-windows-release", ffmpeg_url: "https://sourceforge.net/projects/avbuild/files/windows-desktop/ffmpeg-4.4-windows-desktop-clang-default.tar.xz/download", ffmpeg_name: "ffmpeg-4.4-windows-desktop-clang-default" },
          #{ os: windows-latest, target: aarch64-pc-windows-msvc,    cross: false, name: windows-arm64, ext: ".exe", vcpkg: "arm64-windows" }
      ]
    runs-on: ${{ matrix.targets.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.targets.target }}
      - uses: Swatinem/rust-cache@v1

      - name: Add rust target
        run: rustup target add ${{ matrix.targets.target }}

      - name: Setup target ${{ matrix.targets.target }}
        if: ${{ matrix.targets.target == 'aarch64-apple-darwin' }}
        run: |
          echo "SDKROOT=$(xcrun -sdk macosx11.1 --show-sdk-path)" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx11.1 --show-sdk-platform-version)" >> $GITHUB_ENV

      - uses: lukka/get-cmake@latest
      - uses: lukka/run-vcpkg@v10
        with:
          vcpkgDirectory: '${{ runner.workspace }}/b/vcpkg'
          vcpkgGitCommitId: a720cf5eba9c8b69201db3f84166b4681f9ff0d5
      
      # Download and install OpenCV
      - name: Install OpenCV and curl
        run: |
          cd ${{ github.workspace }}
          vcpkg install "opencv4[core]:${{ matrix.targets.vcpkg }}"
          vcpkg install "curl[core]:${{ matrix.targets.vcpkg }}"
          vcpkg install "opencl:${{ matrix.targets.vcpkg }}"

      # Download and install Qt
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: QtCache-${{ runner.os }}-6.2.2
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: 6.2.2
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      # Install LLVM
      - name: Cache LLVM and Clang
        id: cache-llvm
        uses: actions/cache@v2
        with:
          path: ${{ runner.temp }}/llvm
          key: llvm-13.0
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1.5.0
        with:
          version: "13.0"
          directory: ${{ runner.temp }}/llvm
          cached: ${{ steps.cache-llvm.outputs.cache-hit }}
      #- name: Set LIBCLANG_PATH
      #  run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
      #  if: ${{ matrix.targets.os == 'windows-latest' }}

      # Download ffmpeg
      - name: Download ffmpeg
        run: |
          mkdir ${{ github.workspace }}/ext
          cd ${{ github.workspace }}/ext/
          curl -L ${{ matrix.targets.ffmpeg_url }} -o ffmpeg.tar.xz
          7z x ffmpeg.tar.xz
          7z x ffmpeg.tar

      - name: Build Gyroflow
        env:
          CARGO_TARGET_DIR: ./target
          LIBCLANG_PATH: ${{ env.LLVM_PATH }}/bin/
          FFMPEG_DIR: ${{ github.workspace }}/ext/${{ matrix.targets.ffmpeg_name }}
          OPENCV_LINK_LIBS: opencv_core,opencv_calib3d,opencv_features2d,opencv_imgproc,opencv_video,opencv_flann,opencv_imgcodecs
          OPENCV_LINK_PATHS: ${{ runner.workspace }}/b/vcpkg/installed/${{ matrix.targets.vcpkg }}/lib
          OPENCV_INCLUDE_PATHS: ${{ runner.workspace }}/b/vcpkg/installed/${{ matrix.targets.vcpkg }}/include
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.targets.cross }}
          command: build
          args: --target ${{ matrix.targets.target }} --release

      - name: Strip
        if: ${{ matrix.targets.os != 'windows-latest' }}
        continue-on-error: true
        run: strip target/${{ matrix.targets.target }}/release/gyroflow 2>/dev/null || true

      - name: Copy dist
        if: ${{ matrix.targets.os == 'windows-latest' }}
        env:
          FFMPEG_DIR: ${{ github.workspace }}/ext/${{ matrix.targets.ffmpeg_name }}
        run: |
          ${{ github.workspace }}/_deployment/windows/_copy_dlls.bat ${{ github.workspace }} ${{ env.Qt6_DIR }} ${{ runner.workspace }}/b/vcpkg/installed/${{ matrix.targets.vcpkg }}/bin ${{ github.workspace }}/target/${{ matrix.targets.target }}/release 
          cd ${{ github.workspace }}/_deployment/_binaries/win64/
          7z a ../Gyroflow-${{ matrix.targets.name }}.zip *

      - name: Save Binaries
        uses: actions/upload-artifact@v2
        with:
          name: gyroflow
          path: _deployment/_binaries/*.zip

  github_release:
    name: Create GitHub release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: gyroflow
   
      - run: ls -l

      - name: Publish
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
         files: ./*

